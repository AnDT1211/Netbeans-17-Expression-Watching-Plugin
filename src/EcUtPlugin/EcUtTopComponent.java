package EcUtPlugin;

import EcUtPlugin.common.SaveOnCloseNetbeans;
import EcUtPlugin.common.CommonLookUp;
import EcUtPlugin.model.UTModel;
import EcUtPlugin.service.CmnService;
import EcUtPlugin.service.FileService;
import EcUtPlugin.service.ScanService;
import EcUtPlugin.service.TreeService;
import EcUtPlugin.service.WatchService;
import EcUtPlugin.view.RootMenu;
import EcUtPlugin.view.StepMenu;
import EcUtPlugin.view.UtMenu;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.text.JTextComponent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.undo.UndoManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import jnafilechooser.api.JnaFileChooser;
import org.netbeans.api.editor.EditorRegistry;
import org.openide.windows.Mode;
import org.openide.windows.WindowManager;

@ConvertAsProperties(
        dtd = "-        //EcUtPlugin//EcUt//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "EcUtTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "navigator", openAtStartup = true)
@ActionID(category = "Window", id = "EcUtPlugin.EcUtTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_EcUtAction",
        preferredID = "EcUtTopComponent"
)
@Messages({
    "CTL_EcUtAction=EcUt",
    "CTL_EcUtTopComponent=EcUt Window",
    "HINT_EcUtTopComponent=This is a EcUt window"
})
public final class EcUtTopComponent extends TopComponent {

    private UTModel model = UTModel.initModel();
    private boolean onStartFirstTime = true;

    public EcUtTopComponent() {
        initComponents();
        setName(Bundle.CTL_EcUtTopComponent());
        setToolTipText(Bundle.HINT_EcUtTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fileLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        watchTextArea = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldFullQualifiedClassName = new javax.swing.JTextField();
        jTextFieldModelName = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaFields = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaGetExpressions = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jLabelNumberOfOutPut = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabelNumberOfInput = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        getButton = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAreaSqlSelect = new javax.swing.JTextArea();
        jPanel15 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        editorScrollDownBtn = new javax.swing.JButton();
        editorScrollDownVal = new javax.swing.JSpinner();
        watchScrollDownBtn = new javax.swing.JButton();
        watchScrollDownVal = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        fileLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        fileLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(fileLabel, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.fileLabel.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.setBackground(new java.awt.Color(204, 255, 204));

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));

        jScrollPane2.setViewportView(tree);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));

        watchTextArea.setColumns(20);
        watchTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        watchTextArea.setRows(5);
        watchTextArea.setTabSize(4);
        jScrollPane1.setViewportView(watchTextArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        jPanel5.setBackground(new java.awt.Color(204, 255, 255));

        jPanel6.setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jLabel1.text")); // NOI18N

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextFieldFullQualifiedClassName.setText(org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jTextFieldFullQualifiedClassName.text")); // NOI18N

        jTextFieldModelName.setText(org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jTextFieldModelName.text")); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldFullQualifiedClassName)
                    .addComponent(jTextFieldModelName))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldFullQualifiedClassName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldModelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel7.setBackground(new java.awt.Color(204, 255, 204));

        jTextAreaFields.setColumns(20);
        jTextAreaFields.setRows(5);
        jScrollPane3.setViewportView(jTextAreaFields);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel8.setBackground(new java.awt.Color(204, 255, 204));

        jTextAreaGetExpressions.setColumns(20);
        jTextAreaGetExpressions.setRows(5);
        jScrollPane4.setViewportView(jTextAreaGetExpressions);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );

        jPanel9.setBackground(new java.awt.Color(255, 255, 204));

        jLabelNumberOfOutPut.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabelNumberOfOutPut.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabelNumberOfOutPut, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jLabelNumberOfOutPut.text")); // NOI18N

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelNumberOfOutPut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelNumberOfOutPut)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jLabel4.text")); // NOI18N

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jLabel4)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        jPanel12.setBackground(new java.awt.Color(255, 255, 204));

        jLabelNumberOfInput.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabelNumberOfInput.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabelNumberOfInput, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jLabelNumberOfInput.text")); // NOI18N

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelNumberOfInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelNumberOfInput)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBackground(new java.awt.Color(255, 255, 204));

        getButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(getButton, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.getButton.text")); // NOI18N

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(getButton)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(getButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel14.setBackground(new java.awt.Color(204, 255, 255));

        jTextAreaSqlSelect.setColumns(20);
        jTextAreaSqlSelect.setRows(5);
        jScrollPane5.setViewportView(jTextAreaSqlSelect);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(editorScrollDownBtn, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.editorScrollDownBtn.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(watchScrollDownBtn, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.watchScrollDownBtn.text")); // NOI18N

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jLabel6.text")); // NOI18N

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(editorScrollDownBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editorScrollDownVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(watchScrollDownBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(watchScrollDownVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(507, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editorScrollDownBtn)
                    .addComponent(editorScrollDownVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(watchScrollDownBtn)
                    .addComponent(watchScrollDownVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(340, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(EcUtTopComponent.class, "EcUtTopComponent.jPanel15.TabConstraints.tabTitle"), jPanel15); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editorScrollDownBtn;
    private javax.swing.JSpinner editorScrollDownVal;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JButton getButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelNumberOfInput;
    private javax.swing.JLabel jLabelNumberOfOutPut;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaFields;
    private javax.swing.JTextArea jTextAreaGetExpressions;
    private javax.swing.JTextArea jTextAreaSqlSelect;
    private javax.swing.JTextField jTextFieldFullQualifiedClassName;
    private javax.swing.JTextField jTextFieldModelName;
    private javax.swing.JTree tree;
    private javax.swing.JButton watchScrollDownBtn;
    private javax.swing.JSpinner watchScrollDownVal;
    private javax.swing.JTextArea watchTextArea;
    // End of variables declaration//GEN-END:variables

    CommonLookUp commonLookup;

    @Override
    public void componentOpened() {
        // check temp dir exist, if not -> create new one
        FileService.checkTempDirExist();

        commonLookup = Lookup.getDefault().lookup(CommonLookUp.class);
        initTree();

        eventRegisterForWatchTextArea();
        eventRegisterForTree();

        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        commonLookup.setWatchTextArea(watchTextArea);

        eventRegisterForModelGetTool();

        eventRegisterForScrollFeature();
    }

//    int currentDept;
    private DefaultMutableTreeNode selectedStepNode;

    private void initTree() {
        DefaultMutableTreeNode rootNode = TreeService.initTree(model);
        tree.setModel(new DefaultTreeModel(rootNode));
        tree.setRootVisible(false);

        // select added node (step node dau tien)
//        currentDept = 3;
        selectedStepNode = TreeService.getStepNodeAtUtNodeIdx(tree, 0, 0);
        TreePath newPath = TreeService.getTreePathFromIdx(tree, 0, 0);
        tree.setSelectionPath(newPath);

        selectedNode = (DefaultMutableTreeNode) newPath.getLastPathComponent();
        parentSelectedNode = (DefaultMutableTreeNode) selectedNode.getParent();
    }

    /**
     * **********************************************
     * FOR WATCH TEXT AREA
     */
    // <editor-fold defaultstate="collapsed" desc="Event register for watch text area">
    /**
     * add key listener event for watch text area
     */
    private void eventRegisterForWatchTextArea() {
        setKeyListenerForWatchTextArea_ADDTOWATCH();
        setKeyListenerForWatchTextArea_ESCAPE();
        setKeyListenerForWatchTextArea_UNDOREDO();
        setKeyListenerForWatchTextArea_SAVE();
//        setChangeListenerForWatchTextArea_AUTOSAVETOMODEL();
    }

    /**
     * add key listener event for watch text area <br/>
     * ctr enter key to add expression to watches window ctr shift enter key to get all expressions to watch text area
     */
    private void setKeyListenerForWatchTextArea_ADDTOWATCH() {
        watchTextArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                int ctr = KeyEvent.CTRL_DOWN_MASK;
                int shift = KeyEvent.SHIFT_DOWN_MASK;
                if ((evt.getModifiersEx() & ctr) == ctr && evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    WatchService.setValueToWatchesWindow(watchTextArea.getText());
                } else if ((evt.getModifiersEx() & shift) == shift && evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    String exps = WatchService.getValueToWatchTextArea();
                    watchTextArea.setText(exps);
                }
            }
        });
    }

    /**
     * add key listener event for watch text area <br/>
     * escape key to return tree explorer tab
     */
    private void setKeyListenerForWatchTextArea_ESCAPE() {
        watchTextArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyChar() == KeyEvent.VK_ESCAPE) {
                    jTabbedPane1.setSelectedIndex(0);
                }
            }
        });
    }

    /**
     * add key listener event for watch text area <br/>
     * ctr Z for undo <br/>
     * ctr Y for redo
     */
    private void setKeyListenerForWatchTextArea_UNDOREDO() {
        UndoManager undoManager = new UndoManager();
        watchTextArea.getDocument().addUndoableEditListener(undoManager);
        watchTextArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                int ctr = KeyEvent.CTRL_DOWN_MASK;
                try {
                    if ((evt.getModifiersEx() & ctr) == ctr && evt.getKeyCode() == KeyEvent.VK_Z) {
                        undoManager.undo();
                    } else if ((evt.getModifiersEx() & ctr) == ctr && evt.getKeyCode() == KeyEvent.VK_Y) {
                        undoManager.redo();
                    }
                } catch (Exception ex) {

                }
            }
        });
    }

    private void setKeyListenerForWatchTextArea_SAVE() {
        watchTextArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                int ctr = KeyEvent.CTRL_DOWN_MASK;
                try {
                    if ((evt.getModifiersEx() & ctr) == ctr && evt.getKeyCode() == KeyEvent.VK_S) {
                        // TODO
                        // ecUtController.saveTextToModelAccordingToTreeNode(watchTextArea.getText());
                    }
                } catch (Exception ex) {

                }
            }
        });
    }
    // </editor-fold>

    /**
     * **********************************************
     * FOR TREE
     */
    // <editor-fold defaultstate="collapsed" desc="Event register for Tree">
    private void eventRegisterForTree() {
//        selectedNode = null;
//        previousNode = null;
//        parentSelectedNode = null;
//        previousParentSelectedNode = null;

        setEventLeftCLickForTree();
        setEventDoubleLeftCLickForTree();
        setEventRightClickAtRootForTree();
    }

    private DefaultMutableTreeNode selectedNode;
    private DefaultMutableTreeNode previousNode;
    private DefaultMutableTreeNode parentSelectedNode;
    private DefaultMutableTreeNode previousParentSelectedNode;

    /**
     * event left click khi thay đổi step node
     */
    private void setEventLeftCLickForTree() {
        // event for tree
        // left click
        tree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent tse) {
                TreePath path = tse.getNewLeadSelectionPath();

                // luu vao model cai watch cua step truoc
                if (path != null && selectedNode != null) {
                    String exps = WatchService.getValueToWatchTextArea();
                    String stepName = TreeService.getNameFromNode(selectedNode);
                    String utName = TreeService.getNameFromNode(parentSelectedNode);

                    Map<String, List<String>> mapUts = model.getUts();
                    List<String> uts = mapUts.get(utName);
                    uts.set(CmnService.strToNum(stepName) - 1, exps);
                }

                previousNode = selectedNode;
                previousParentSelectedNode = parentSelectedNode;

                // loi cai watch cua step hien tai ra
                if (path != null) {
                    int depth = path.getPathCount();
                    if (depth == 3) {
                        selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();
                        parentSelectedNode = (DefaultMutableTreeNode) selectedNode.getParent();
                        String stepName = TreeService.getNameFromNode(selectedNode);
                        String utName = TreeService.getNameFromNode(parentSelectedNode);

                        String exps = UTModel.getExpressions(model, utName, stepName);
                        WatchService.setValueToWatchesWindow(exps);
                        watchTextArea.setEnabled(true);
                        watchTextArea.setText(exps);
                    } else {
                        selectedNode = null;
                        previousNode = selectedNode;
                        watchTextArea.setEnabled(false);
                    }
                }

                // set save on close netbeans
                SaveOnCloseNetbeans.setInfo(model, file);
            }
        });
    }

    /**
     * event double click -> switch qua tab text area
     */
    private void setEventDoubleLeftCLickForTree() {
        // event for tree
        // double left click
        tree.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
                if (evt.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(evt)) {
                    TreePath path = tree.getPathForLocation(evt.getX(), evt.getY());
                    if (path != null && path.getPathCount() == 3) {
                        jTabbedPane1.setSelectedIndex(1);
                    }
                }
            }
        });
    }

    private void deleteStepRunnable() {
        // get current node
        DefaultMutableTreeNode selectedNodeStep = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        String selectedNodeName = (String) selectedNodeStep.getUserObject();
        int idx = CmnService.strToNum(selectedNodeName) - 1;

        DefaultMutableTreeNode utNode = (DefaultMutableTreeNode) selectedNodeStep.getParent();
        String utNodeName = (String) utNode.getUserObject();

        // check size, if size == 1, ignore
        List<String> listSteps = model.getUts().get(utNodeName);
        if (listSteps.size() == 1) {
            JOptionPane.showMessageDialog(null, "Cannot Remove!\nAn UT has to have at least 1 step", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // show confirmation dialog
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove the last Step?", "Confirmation", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION) {
            return;
        }

        /*
            |
        1 2 3 4 5 6
        1 2 3 4 5
         */
        int stepNumSelected = CmnService.strToNum(selectedNodeName);
        for (int i = 0; i < utNode.getChildCount(); i++) {
            DefaultMutableTreeNode stepNode = (DefaultMutableTreeNode) utNode.getChildAt(i);
            String stepName = (String) stepNode.getUserObject();

            int stepNum = CmnService.strToNum(stepName);
            if (stepNum <= stepNumSelected) {
                continue;
            }

            String stepNewName = "#" + (CmnService.strToNum(stepName) - 1);
            stepNode.setUserObject(stepNewName);
        }

        // update tree
        DefaultMutableTreeNode nodeToRemove = (DefaultMutableTreeNode) utNode.getChildAt(idx);
        ((DefaultTreeModel) tree.getModel()).removeNodeFromParent(nodeToRemove);

        // update to model
        List<String> listStepOfOldUt = model.getUts().get(utNodeName);
        if (idx + 1 < listStepOfOldUt.size()) {
            String nextExp = listStepOfOldUt.get(idx + 1);
            WatchService.setValueToWatchesWindow(nextExp);
            listStepOfOldUt.remove(idx);
        } else {
            listStepOfOldUt.remove(idx);
            selectedNode = (DefaultMutableTreeNode) utNode.getChildAt(0);
            WatchService.setValueToWatchesWindow(model.getUts().get(utNodeName).get(0));
        }

    }

    private void insertNewStepAboveRunnable() {
        DefaultMutableTreeNode selectedNodeStep = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        String selectedStepNodeName = (String) selectedNode.getUserObject();

        DefaultMutableTreeNode utNode = (DefaultMutableTreeNode) selectedNodeStep.getParent();
        String utNodeName = (String) utNode.getUserObject();

        List<String> listStep = model.getUts().get(utNodeName);
        listStep.add(CmnService.strToNum(selectedStepNodeName) - 1, "");

        /*
            |
        1 2 3 4 5 6
        1 2   4 5 6 7
         */
        int stepNumSelected = CmnService.strToNum(selectedStepNodeName);
        for (int i = 0; i < utNode.getChildCount(); i++) {
            DefaultMutableTreeNode stepNode = (DefaultMutableTreeNode) utNode.getChildAt(i);
            String stepName = (String) stepNode.getUserObject();

            int stepNum = CmnService.strToNum(stepName);
            if (stepNum < stepNumSelected) {
                continue;
            }

            String stepNewName = "#" + (CmnService.strToNum(stepName) + 1);
            stepNode.setUserObject(stepNewName);
        }

        int idx = CmnService.strToNum(selectedStepNodeName) - 1;

        // add new step node to tree
        String newStepName = "#" + (CmnService.strToNum(selectedStepNodeName));
        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newStepName);
        ((DefaultTreeModel) tree.getModel()).insertNodeInto(newNode, utNode, idx);

        // select added node
        TreePath newPath = new TreePath(((DefaultTreeModel) tree.getModel()).getPathToRoot(newNode));
        tree.setSelectionPath(newPath);
        selectedStepNode = (DefaultMutableTreeNode) newPath.getLastPathComponent();

        WatchService.setValueToWatchesWindow("");
    }

    private void insertNewStepAfterRunnable() {
        DefaultMutableTreeNode selectedNodeStep = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        String selectedStepNodeName = (String) selectedNode.getUserObject();

        DefaultMutableTreeNode utNode = (DefaultMutableTreeNode) selectedNodeStep.getParent();
        String utNodeName = (String) utNode.getUserObject();

        List<String> listStep = model.getUts().get(utNodeName);
        listStep.add(CmnService.strToNum(selectedStepNodeName), "");

        /*
          |
        1 2 3 4 5 6
        1 2   4 5 6 7
         */
        int stepNumSelected = CmnService.strToNum(selectedStepNodeName);
        for (int i = 0; i < utNode.getChildCount(); i++) {
            DefaultMutableTreeNode stepNode = (DefaultMutableTreeNode) utNode.getChildAt(i);
            String stepName = (String) stepNode.getUserObject();

            int stepNum = CmnService.strToNum(stepName);
            if (stepNum <= stepNumSelected) {
                continue;
            }

            String stepNewName = "#" + (CmnService.strToNum(stepName) + 1);
            stepNode.setUserObject(stepNewName);
        }

        int idx = CmnService.strToNum(selectedStepNodeName);

        // add new step node to tree
        String newStepName = "#" + (CmnService.strToNum(selectedStepNodeName) + 1);
        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newStepName);
        if (idx == model.getUts().get(utNodeName).size()) {
            ((DefaultTreeModel) tree.getModel()).insertNodeInto(newNode, utNode, model.getUts().get(utNodeName).size());
        } else {
            ((DefaultTreeModel) tree.getModel()).insertNodeInto(newNode, utNode, idx);
        }

        // select added node
        TreePath newPath = new TreePath(((DefaultTreeModel) tree.getModel()).getPathToRoot(newNode));
        tree.setSelectionPath(newPath);
        selectedStepNode = (DefaultMutableTreeNode) newPath.getLastPathComponent();

        WatchService.setValueToWatchesWindow("");
    }

    /**
     * event right click -> open menu
     */
    private void setEventRightClickAtRootForTree() {
        tree.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
                if (SwingUtilities.isRightMouseButton(evt)) {
                    int row = tree.getRowForLocation(evt.getX(), evt.getY());
                    TreePath path = tree.getPathForLocation(evt.getX(), evt.getY());

                    if (row != -1 && path != null) {
                        tree.setSelectionPath(path);
                        int depth = path.getPathCount();

                        // when right click at UT
                        if (depth == 2) {
                            UtMenu.showMenu(evt, tree, model, EcUtTopComponent.this::insertNewStep);

                            // when right click at Step
                        } else if (depth == 3) {
                            StepMenu.showMenu(evt, tree, () -> insertNewStepAboveRunnable(), () -> insertNewStepAfterRunnable(),
                                    () -> deleteStepRunnable());
                        }
                    } else {
                        // when right click at different the above
                        RootMenu.showMenu(evt, tree, model, EcUtTopComponent.this::insertNewNode,
                                () -> handleSaveAction(), () -> handleSaveAsAction(), () -> handleOpenFileButton(),
                                () -> handleCreateNewSet());
                    }
                }
            }
        });
    }

    // For UT menu
    private void handleCreateNewSet() {
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to create new Set?\nAll data will be lost if you do not save yet!", "Confirmation", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION) {
            return;
        }

        UTModel tmp = UTModel.initModel();
        model.setUtName(tmp.getUtName());
        model.setUts(tmp.getUts());

        watchTextArea.setText("");

        fileLabel.setText("UT Manager");
        file = null;

        selectedNode = null;
        previousNode = null;
        parentSelectedNode = null;
        previousParentSelectedNode = null;

        componentOpened();
    }

    private void insertNewStep() {
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        String selectedNodeName = (String) selectedNode.getUserObject();

        // get total element of the current UT
        int count = model.getUts().get(selectedNodeName).size();

        // get values expressions from previous step
        String expressionsOfPrevStep = model.getUts().get(selectedNodeName).get(count - 1);

        // save to model a new child step node
//        model.getUts().get(selectedNodeName).add(expressionsOfPrevStep);
        model.getUts().get(selectedNodeName).add("");

        // add new step node to tree
        DefaultMutableTreeNode nextNode = new DefaultMutableTreeNode("#" + (count + 1));
        ((DefaultTreeModel) tree.getModel()).insertNodeInto(nextNode, selectedNode, selectedNode.getChildCount());

        // select added node
        TreePath newPath = new TreePath(((DefaultTreeModel) tree.getModel()).getPathToRoot(nextNode));
        tree.setSelectionPath(newPath);
        selectedStepNode = (DefaultMutableTreeNode) newPath.getLastPathComponent();
    }

    private void handleSaveAction() {
        if (selectedNode != null) {
            String exps = WatchService.getValueToWatchTextArea();
            String stepName = TreeService.getNameFromNode(selectedNode);
            String utName = TreeService.getNameFromNode(parentSelectedNode);

            Map<String, List<String>> mapUts = model.getUts();
            List<String> uts = mapUts.get(utName);
            uts.set(CmnService.strToNum(stepName) - 1, exps);
        }
        // Save Model to File
        saveToFile(file);
    }

    private void handleSaveAsAction() {
        if (selectedNode != null) {
            String exps = WatchService.getValueToWatchTextArea();
            String stepName = TreeService.getNameFromNode(selectedNode);
            String utName = TreeService.getNameFromNode(parentSelectedNode);

            Map<String, List<String>> mapUts = model.getUts();
            List<String> uts = mapUts.get(utName);
            uts.set(CmnService.strToNum(stepName) - 1, exps);
        }
        saveToFile(null);
    }

    // For Root menu
    private void insertNewNode(String nameOfNextNode) {
        // insert new node
        DefaultMutableTreeNode nextNode = new DefaultMutableTreeNode(nameOfNextNode);
        DefaultMutableTreeNode nextChildNode = new DefaultMutableTreeNode("#1");
        nextNode.add(nextChildNode);

        // get index to insert (theo thu tu tang dan String)
        int index = new ArrayList<>(model.getUts().keySet()).indexOf(nameOfNextNode);
        ((DefaultTreeModel) tree.getModel()).insertNodeInto(nextNode, TreeService.getRootNode(tree), index);

        // select added node
        TreePath newPath = TreeService.getTreePathFromTreeModel(tree, nextChildNode);
        tree.setSelectionPath(newPath);
        selectedStepNode = (DefaultMutableTreeNode) newPath.getLastPathComponent();
    }
    // </editor-fold>

    // file to read and save
    private File file;

    // open file event
    public void handleOpenFileButton() {

        JnaFileChooser fc = new JnaFileChooser();
        fc.addFilter("UT File (.xlsx)", "xlsx");
        if (fc.showOpenDialog(null)) {
            File f = fc.getSelectedFile();
            fileLabel.setText(f.getName());
            file = f;
        } else {
            return;
        }

        selectedNode = null;
        previousNode = null;
        parentSelectedNode = null;
        previousParentSelectedNode = null;
        model = null;

        // TODO read the file
        model = FileService.readExcel(file);
        if (model == null) {
            model = UTModel.initModel();

            // if exception
            if (!FileService.writeExcel(file, model)) {
                JOptionPane.showMessageDialog(null, "Exception");
                return;
            }
        }

        // TODO set to tree
        model = FileService.readExcel(file);
        initTree();
    }

    private void saveToFile(File file) {
        // set current model by selecting the root node
        TreePath newPath = new TreePath((DefaultMutableTreeNode) tree.getModel().getRoot());
        tree.setSelectionPath(newPath);

        // save
        if (file == null) {
            JnaFileChooser fc = new JnaFileChooser();
            fc.addFilter("UT File (.xlsx)", "xlsx");
            if (fc.showSaveDialog(null)) {
                File f = fc.getSelectedFile();
                if (f != null) {
                    String fileName = f.getName();
                    String filePath = f.getAbsolutePath();
                    String fileExtension = ".xlsx";
                    if (!fileName.contains(fileExtension)) {
                        filePath += fileExtension;
                    }

                    this.file = new File(filePath);
                    if (!this.file.exists()) {
                        try {
                            this.file.createNewFile();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
                            file = null;
                            fileLabel.setText("UT Manager");
                            return;
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "file đã tồn tại", "Error", JOptionPane.ERROR_MESSAGE);
                        this.file = null;
                        fileLabel.setText("UT Manager");
                        return;
                    }
                } else {
                    return;
                }
            } else {
                return;
            }
        }
        FileService.writeExcel(this.file, model);
        fileLabel.setText(this.file.getName());
    }

    private static void registerUndoRedo(JTextComponent jTextArea, UndoManager undoManager) {
        jTextArea.getDocument().addUndoableEditListener(undoManager);
        jTextArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                int ctr = KeyEvent.CTRL_DOWN_MASK;
                try {
                    if ((evt.getModifiersEx() & ctr) == ctr && evt.getKeyCode() == KeyEvent.VK_Z) {
                        undoManager.undo();
                    } else if ((evt.getModifiersEx() & ctr) == ctr && evt.getKeyCode() == KeyEvent.VK_Y) {
                        undoManager.redo();
                    }
                } catch (Exception ex) {

                }
            }
        });
    }

    private void eventRegisterForModelGetTool() {
        registerUndoRedo(jTextFieldFullQualifiedClassName, new UndoManager());
        registerUndoRedo(jTextFieldModelName, new UndoManager());
        registerUndoRedo(jTextAreaFields, new UndoManager());
        registerUndoRedo(jTextAreaGetExpressions, new UndoManager());

        registerGetButton();
    }

    private void registerGetButton() {
        getButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int numberOfInput = 0;
                if (jTextAreaFields.getText() != null && !jTextAreaFields.getText().isBlank()) {
                    jTextAreaFields.setText(jTextAreaFields.getText().lines().filter(Predicate.not(String::isBlank)).map(String::trim).distinct().collect(Collectors.joining("\n")));
                    numberOfInput = (int) jTextAreaFields.getText().lines().count();

                    String sqlGet = jTextAreaFields.getText().lines().map(f -> {
                        return jTextFieldModelName.getText() + ".get(\"" + f + "\")";
                    }).collect(Collectors.joining("\n"));
                    jTextAreaSqlSelect.setText(sqlGet);
                }

                if (jTextFieldFullQualifiedClassName.getText() == null || jTextFieldFullQualifiedClassName.getText().isBlank()
                        || jTextAreaFields.getText() == null || jTextAreaFields.getText().isBlank()) {
//                    jTextAreaGetExpressions.setText("");
//                    jTextAreaSqlSelect.setText("");
                    jLabelNumberOfInput.setText("");
                    jLabelNumberOfOutPut.setText("");

                    return;
                }

//                jTextAreaFields.setText(jTextAreaFields.getText().lines().filter(Predicate.not(String::isBlank)).map(String::trim).distinct().collect(Collectors.joining("\n")));
//                int numberOfInput = (int) jTextAreaFields.getText().lines().count();
                // ------------------------
//                String sqlGet = jTextAreaFields.getText().lines().map(f -> {
//                    return jTextAreaFields.getText() + "get(\"" + f + "\")";
//                }).collect(Collectors.joining("\n"));
//                jTextAreaSqlSelect.setText(sqlGet);
                // ------------------------
                Method[] methods = ScanService.getAllMethods(jTextFieldFullQualifiedClassName.getText());
                List<String> listMethods = Stream.of(methods).map(Method::getName).toList();
                String output = jTextAreaFields.getText().lines().filter(Predicate.not(String::isBlank)).map(String::trim)
                        .map(field -> {
                            String isMethod = "is" + field.substring(0, 1).toUpperCase() + field.substring(1, field.length());
                            String getMethod = "get" + field.substring(0, 1).toUpperCase() + field.substring(1, field.length());
                            if (listMethods.contains(isMethod)) {
                                return isMethod;
                            } else if (listMethods.contains(getMethod)) {
                                return getMethod;
                            }
                            return "";
                        }).filter(Predicate.not(String::isBlank)).map(mtd -> {

                    String mtdCall = mtd + "()";
                    if (jTextFieldModelName.getText() == null || jTextFieldModelName.getText().isBlank()) {
                        return mtdCall;
                    }
                    return jTextFieldModelName.getText() + "." + mtdCall;
                }).collect(Collectors.joining("\n"));

                int numberOfOutput = (int) output.lines().count();

                jTextAreaGetExpressions.setText(output);
                jLabelNumberOfInput.setText("Input: " + numberOfInput);
                jLabelNumberOfOutPut.setText("Output: " + numberOfOutput);

                if (numberOfInput != numberOfOutput) {
                    jLabelNumberOfOutPut.setForeground(Color.RED);
                } else {
                    jLabelNumberOfOutPut.setForeground(Color.BLACK);
                }
            }
        });
    }

    // ----------------------------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------
    private void eventRegisterForScrollFeature() {
        editorScrollDownVal.setValue(17);
        editorScrollDownBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JTextComponent editorComponent = EditorRegistry.lastFocusedComponent();
                JScrollPane editorScroll = (JScrollPane) editorComponent.getParent().getParent().getParent();
                editorScroll.getVerticalScrollBar().setValue(editorScroll.getVerticalScrollBar().getValue() + (int) editorScrollDownVal.getValue());
            }
        });

        watchScrollDownVal.setValue(10);
        watchScrollDownBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                TopComponent watchCopenent = null;
                for (Mode mode : WindowManager.getDefault().getModes()) {
                    TopComponent[] tcs = WindowManager.getDefault().getOpenedTopComponents(mode);
                    for (TopComponent tc : tcs) {
                        if ("Watches".equals(tc.getName())) {
                            watchCopenent = tc;
                        }
                    }
                }
                JScrollPane watchScroll = findJscrollPaneInComponent(watchCopenent);
                watchScroll.getVerticalScrollBar().setValue(watchScroll.getVerticalScrollBar().getValue() + (int) watchScrollDownVal.getValue());
            }
        });
    }

    private static JScrollPane findJscrollPaneInComponent(Component comp) {
        if (comp instanceof JScrollPane) {
            return (JScrollPane) comp;
        } else if (comp instanceof Container) {
            for (Component child : ((Container) comp).getComponents()) {
                JScrollPane scrollPane = findJscrollPaneInComponent(child);
                if (scrollPane != null) {
                    return scrollPane;
                }
            }
        }
        return null;
    }

    // ----------------------------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------
    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

}
